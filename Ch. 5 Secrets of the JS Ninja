Functions for the master: closures and scopes

    Closures make a lot of things a whole lot easier, and other things possible. 
  Traditionally, closures have been a feature of purely functional programming languages. They
  are crossing over into mainstream development. This is good, as they can drastically simplify
  complex operations. 
  
    Closures are a side effect of how scopes work in JS. 
    
  Understanding Closures
      A closure allows a function to access and manipulate variables that are external to that function.
    Closures allow a function to access all the variables, as well as other functions, that are in scope when
    the function itself is defined. 
    
      That may seem intuitive until you remember that a declared function can be called at any later time,
    even after the scope in which it was declared has gone away. 
    
      When we declare an inner function inside an outer function, not only is the function declaration
    defined, but a closure is created that encompasses the functino definition as well as ALL variables
    in scope at the point of function definition!!
    
    That's what closures are all about. They create a "safety bubble" of the function and the variables
    in scope at the point of the functions. This ensures that the function has all it needs to execute. 
    It's important to remember that each function that accesses information via a closure has a
    "ball and chain" attached to it. All that information needs to be held in memory until it's 
    absolutely clear to the engine that it's no longer needed. 
    
  Putting closures to work
    Mimicking private variables:
      Many programming languages use private variables - properties of an object that are hidden
      from outside parties. Unfortunately, JS doesn't have native support for private variables.
      But by using a closure, we can achieve an acceptable approximation.
      ex:
        function Ninja() {
          var feints = 0;
          this.getFeints = function() {
            return feints;
          };
          this.feint = function() {
            feints++;
          };
        }
        
        var ninja1 = new Ninja();
        ninja1.feint();
        console.log(ninja1.feints);
        // undefined
        console.log(ninja1.getFeints);
        // 1
        
        This heavily mimics the concept of a getter that you know from c++. We can use the accessor method
      to obtain the value of the private vairable but that we can't access it directly. This prevents us
      from making uncontrolled changes to the value of the variable.
      Even though the function scope has closed, there is a version of feints stored in each new
      ninja object. This is another example of a closure and a glimpse into the world of object-oriented
      Javascript. 
      
        Recall that when using the new keyword on a function, a new object instance is created, and the function
      is called with that new object as its context. So 'this' within the function refers to a newly instantiated
      object. 
      
    Using closures with callbacks
        Another common use of closures occurs when dealing with callbacks - when a function is called
      at an unspecified later time. Often, within such functions, we frequently need to access outside
      data. 
        If we keep variables in global scope, we need a set of variables for EACH function call, otherwise
      they'll step all over each other, trying to use the same set of variables to keep track of multiple states. 
      By defining the variables inside the function, and by relying on closures to make them available to the timer
      callback invocations, each animation gets its own private "bubble" of variables.
    
  Tracking code execution with execution contexts
      In JavaScript, the fundamental unit of execution is a function. There are two main types of 
    JS code: global code, placed outside all functions, and function code, contained in functions. When
    our code is being executed by the JavaScript engine, each statement is executed in a certain execution 
    context.
      The significant difference is that there's only one global execution context, created when our JS
    program starts executing, whereas a new function execution context is created on each function invocation.
    
      JavaScript is based on a single-threaded execution model: Only one piece of code can be executed
    at a time. Every time a function is invoked, the current execution context has to be stopped,
    and a new function execution context, in which the function code will be evaluated, has to be created. 
    Theres a need to keep track of all these execution contexts - both the one that's executing and the 
    ones that are patiently waiting. The way that this is done is by using a stack, called the execution
    context stack, or call stack. 
  
  Keeping track of identifiers with lexical environments
      A lexical environment is an internal JavaScript engine construct used to keep track of the 
    mapping from identifiers to specific variables. 
      Lexical environments are an internal implementation of the JavaScript scoping mechanism, and 
    people often colloquially refer to them as scopes. 
      Whenever a new code scope is started, it gets its own lexical environment. It's important
    to emphasize that an inner code structure has access to the variables defined in outer code structures.
    
  Code nesting and lexical environments
      As well as keeping track of local variables, function declarations, and function parameters, each 
    lexical environment has to keep track of its outer (parent) lexical environment. 
      In a particular execution context, our programs often access other variables defined in outer
    environments.
      Whenever a function is created, a reference to the lexical environment in which the function
    was created is stored in an internal (you can't access or manipulate it directly) property named
    [[Environment]] (double brackets signify an internal property)
    
Understanding types of JavaScript variables
    In JavaScript, we can use three keywords for defining variables: var, let, and const. They differ
  in two aspects: mutability, and their relationship toward the lexical environment. 
  
  Variable mutability
      If we were to divid variable declaration keywords by mutability, we'd put const on one side
    and var and let on the other side. All variables defined with const are immutable, meaning that
    their value can only be set once. 
    
    Const variables
      A const "variable" is similar to a normal variable, with the exception that we have to provide
    an initialization value when it's declared, and we can't assign a completely new value to it afterward. 
    Const variables are often used for two slightly different purposes:
      1. Specifying variables that shouldn't be reassigned
      2. Referencing a fixed value, for example, MAX_STUDENT_COUNT
      
      When you assign an object or an array to a const, you still cannot reassign the const, but you
    can modify the object/array.
    
  Variable relationship toward the lexical environment
      The three types of variable definitions - var, let, and const - can also be categorized by
    their relationsip with the lexical environment. In that case, we can put var on one side, and let and 
    const on the other. 
    
    Using the var keyword
      When using the var keyword, the variable is defined in the closest function or global lexical
    environment. Even if you are in a for loop, the variables will be defined in the closest function
    outside of the loop. 
    
      In other languages, when you declare variables within a block environment, they aren't defined
    outside of that block, but in JavaScript, with the var keyword, they are.
    
    Using the let and const to specify block-scoped variables
      Unlike var, which defines the variable in the closest function or global lexical environment,
    the let and const keywords are more straightforward. They define variables in the closest lexical
    environment (which can be a block environment, a loop environment a function environment, or even 
    the global environment). We can use let and const to define block-scoped, function-scoped, and 
    global-scoped variables. 
    
    ***This allows JavaScript to finally support the same scoping rules as other C-like languages. Because
    of this, const and let are much more widely used than var in professional programming. 
    
  Registering identifiers within lexical environments
    It turns out that the JavaScript engine "cheats" a little, and that execution of JavaScript code
  occurs in two phases:
    The first: this is activated whenever a new lexical environment is created. In this phase, the code
  isn't executed, but the JS engine visits and registers all declared variables and functions within
  the current lexical environment. 
    The second: JavaScript execution, starts after this has been accomplished; the exact behaviour 
  depends on the type of variable (let, var, const, function declaration) and the type of environment
  (global, function, or block). Function declarations are skipped in this step, as they are already 
  done.
  
    This behaviour allows function declarations to be placed anywhere, as they are handled in 
  the first step, while function expressions and arrow functions are handled in the second step. 
  
Exploring how closures work
    We started with the definition of closures, which are a mechanism that allows a function to access all
  variables that are in scope when the function itself is created. 
  
  Revisiting mimicking private variables with closures
      Every time we invoke a constructor function, we create a new lexical environment, which
    keeps track of variables local to the constructor. 
      When you are in a constructor creating a method, the method keeps the environment that it was 
    created in alive, thus keeping alive the "private" variables of each instance. 
      Every object created with a constructor gets its own methods that close around the variables
    defined when the constructor was invoked. 
      When you call a method of an object, the lexical environment that you enter is the one of 
    that method, but the outer environment is of the CONSTRUCTOR, so you are still able to see out
    of the method to see the other variables of the constructor. 
      It is possible to create another object (called imposter in this example) and set its getFeints() method to
      ninja1.getFeints() method. This gives the imposter access to the ninja1 feints variable.
    
    
  
      


