Functions for the master: closures and scopes

    Closures make a lot of things a whole lot easier, and other things possible. 
  Traditionally, closures have been a feature of purely functional programming languages. They
  are crossing over into mainstream development. This is good, as they can drastically simplify
  complex operations. 
  
    Closures are a side effect of how scopes work in JS. 
    
  Understanding Closures
      A closure allows a function to access and manipulate variables that are external to that function.
    Closures allow a function to access all the variables, as well as other functions, that are in scope when
    the function itself is defined. 
    
      That may seem intuitive until you remember that a declared function can be called at any later time,
    even after the scope in which it was declared has gone away. 
    
      When we declare an inner function inside an outer function, not only is the function declaration
    defined, but a closure is created that encompasses the functino definition as well as ALL variables
    in scope at the point of function definition!!
    
    That's what closures are all about. They create a "safety bubble" of the function and the variables
    in scope at the point of the functions. This ensures that the function has all it needs to execute. 
    It's important to remember that each function that accesses information via a closure has a
    "ball and chain" attached to it.
    
      
      


